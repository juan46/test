// Generated by CoffeeScript 1.7.1
(function() {
  var DB, GC_SECONDS, MAX_ITEMS, Q, debugP, monk, utils, _,
    __slice = [].slice;

  Q = require("q");

  _ = require("underscore");

  monk = require("monk");

  utils = require("./utils");

  Q.longStackSupport = true;

  MAX_ITEMS = 20;

  GC_SECONDS = 30;

  exports.init = function(url) {
    var db;
    db = new DB(url);
    setInterval((function() {
      return db.gc();
    }), GC_SECONDS * 1000);
    return db;
  };

  DB = (function() {
    function DB(url) {
      utils.log(url);
      this.mongoDB = monk(url);
    }

    DB.prototype.count = function() {
      return this._dbCall('count', {}).then(function(result) {
        return result;
      });
    };

    DB.prototype.search = function() {
      return this._dbCall('find', {}).then(function(result) {
        return result.map(function(todo) {
          todo.id = todo._id;
          delete todo['_id'];
          return todo;
        });
      });
    };

    DB.prototype.create = function(item) {
      var err;
      item = this._sanitize(item);
      if (item != null) {
        delete item.id;
      }
      if (item == null) {
        err = new Error("item cannot be null");
        return Q.reject(err);
      }
      return this._dbCall('insert', item).then(function(result) {
        item.id = result._id;
        delete item['_id'];
        return item;
      });
    };

    DB.prototype.read = function(id) {
      var err;
      if (id == null) {
        err = new Error("id cannot be null");
        return Q.reject(err);
      }
      return this._dbCall('findById', id).then(function(result) {
        return result;
      });
    };

    DB.prototype.update = function(id, item) {
      var err;
      item = this._sanitize(item);
      if (id == null) {
        err = new Error("id cannot be null");
        return Q.reject(err);
      }
      if (item == null) {
        err = new Error("item cannot be null");
        return Q.reject(err);
      }
      if (id !== item.id) {
        err = new Error("id does not match item.id");
        return Q.reject(err);
      }
      return this._dbCall('findAndModify', {
        "_id": id
      }, item).then(function(result) {
        result.id = id;
        delete result['_id'];
        result.order = item.order;
        result.completed = item.completed;
        result.title = item.title;
        return result;
      });
    };

    DB.prototype["delete"] = function(id) {
      var err;
      if (id == null) {
        err = new Error("id cannot be null");
        return Q.reject(err);
      }
      return this._dbCall('remove', {
        "_id": id
      });
    };

    DB.prototype.gc = function() {
      return this.count().then((function(_this) {
        return function(count) {
          if (count <= MAX_ITEMS) {
            return;
          }
          return _this.search();
        };
      })(this)).then((function(_this) {
        return function(items) {
          if (!items) {
            return;
          }
          if (!items.length) {
            return;
          }
          utils.log("gc: " + items[0].id);
          return _this["delete"](items[0].id);
        };
      })(this)).then((function(_this) {
        return function(id) {
          if (!id) {
            return;
          }
          return process.nextTick(function() {
            return _this.gc();
          });
        };
      })(this)).fail(function(err) {
        return utils.log("gc: error: " + err);
      }).done();
    };

    DB.prototype._get = function(id) {
      return this._dbCall("get", id).then(function(result) {
        return result[0];
      });
    };

    DB.prototype._dbCall = function() {
      var args, coll, method;
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      coll = this.mongoDB.get('todos');
      return Q.npost(coll, method, args);
    };

    DB.prototype._sanitize = function(obj) {
      var completed, id, order, title;
      if (obj == null) {
        return null;
      }
      id = obj.id, title = obj.title, completed = obj.completed, order = obj.order;
      obj = {
        id: id,
        title: title,
        completed: completed,
        order: order
      };
      if ((obj.id == null) && (obj.title == null) && (obj.completed == null) && (obj.order == null)) {
        return null;
      }
      return obj;
    };

    return DB;

  })();

  debugP = function(p, label) {
    if (true) {
      return p;
    }
    utils.log("" + label + " ->");
    p.then((function(_this) {
      return function(result) {
        utils.log("" + label + ": success: " + (utils.JL(result)));
        return result;
      };
    })(this)).fail((function(_this) {
      return function(err) {
        utils.log("" + label + ": error: " + err);
        throw err;
      };
    })(this));
    return p;
  };

}).call(this);
